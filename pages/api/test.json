{
	"title": "CSS Positioning Elements",
	"info": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
	"postionPropValues": "<code> position: static; position: relative; position: absolute; position: fixed; position: sticky; </code>",
	"staticdesc": "The element is positioned according to the normal flow of the document. The top, right, bottom, left, and z-index properties have no effect. This is the default value",
	"relativedesc": " The element is positioned according to the normal flow of the document, and then offset relative to itself based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were static.This value creates a new stacking context when the value of z-index is not auto. Its effect on table-*-group, table-row, table-column, table-cell, and table-caption elements is undefined.",
	"absolutedesc": "The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial containing block. Its final position is determined by the values of top, right, bottom, and left.This value creates a new stacking context when the value of z-index is not auto. The margins of absolutely positioned boxes do not collapse with other margins.",
	"fixeddesc": "The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to the initial containing block established by the viewport, except when one of its ancestors has a transform, perspective, or filter property set to something other than none (see the CSS Transforms Spec), or the will-change property is set to transform, in which case that ancestor behaves as the containing block. (Note that there are browser inconsistencies with perspective and filter contributing to containing block formation.) Its final position is determined by the values of top, right, bottom, and left.This value always creates a new stacking context. In printed documents, the element is placed in the same position on every page.",
	"stickydesc": "The element is positioned according to the normal flow of the document, and then offset relative to its nearest scrolling ancestor and containing block (nearest block-level ancestor), including table-related elements, based on the values of top, right, bottom, and left. The offset does not affect the position of any other elements.This value always creates a new stacking context. Note that a sticky element 'sticks' to its nearest ancestor that has a 'scrolling mechanism' (created when overflow is hidden, scroll, auto, or overlay), even if that ancestor isn't the nearest actually scrolling ancestor.",
	"description": {
		"title": "Types of positioning",
		"textList": [
			"A positioned element is an element whose computed position value is either relative, absolute, fixed, or sticky. (In other words, it's anything except static.)",
			"A relatively positioned element is an element whose computed position value is relative. The top and bottom properties specify the vertical offset from its normal position; the left and right properties specify the horizontal offset.",
			"An absolutely positioned element is an element whose computed position value is absolute or fixed. The top, right, bottom, and left properties specify offsets from the edges of the element's containing block. (The containing block is the ancestor relative to which the element is positioned.) If the element has margins, they are added to the offset. The element establishes a new block formatting context (BFC) for its contents.",
			"A stickily positioned element is an element whose computed position value is sticky. It's treated as relatively positioned until its containing block crosses a specified threshold (such as setting top to value other than auto) within its flow root (or the container it scrolls within), at which point it is treated as 'stuck' until meeting the opposite edge of its containing block."
		],
		"text": "Most of the time, absolutely positioned elements that have height and width set to auto are sized so as to fit their contents. However, non-replaced, absolutely positioned elements can be made to fill the available vertical space by specifying both top and bottom and leaving height unspecified (that is, auto). They can likewise be made to fill the available horizontal space by specifying both left and right and leaving width as auto.Except for the case just described (of absolutely positioned elements filling the available space): If both top and bottom are specified (technically, not auto), top wins.If both left and right are specified, left wins when direction is ltr (English, horizontal Japanese, etc.) and right wins when direction is rtl (Persian, Arabic, Hebrew, etc.)"
	},
	"examples": [
		{
			"title": "Relative positioning",
			"text": "Relatively positioned elements are offset a given amount from their normal position within the document, but without the offset affecting other elements. In the example below, note how the other elements are placed as if 'Two' were taking up the space of its normal location.",
			"codeHtml": "<h2>HTML</h2><br/><code><div class='box' id='one'>One</div> <div class='box' id='two'>Two</div> <div class='box' id='three'>Three</div> <div class='box' id='four'>Four</div></code>",
			"codeCSS": "<h2>CSS</h2><br/><code>* {    box-sizing: border-box;    }       .box {    display: inline-block;       width: 100px;       height: 100px;      background: red;       color: white;     }     #two {     position: relative;       top: 20px;      left: 20px;    background: blue;  }    </code>",
			"result": {
				"imageUrl": ""
			}
		},
		{
			"title": "Absolute positioning",
			"text": "Elements that are relatively positioned remain in the normal flow of the document. In contrast, an element that is absolutely positioned is taken out of the flow; thus, other elements are positioned as if it did not exist. The absolutely positioned element is positioned relative to its nearest positioned ancestor (i.e., the nearest ancestor that is not static). If a positioned ancestor doesn't exist, it is positioned relative to the ICB (initial containing block — see also the W3C definition), which is the containing block of the document's root element.",
			"codeHtml": "<h2>HTML</h2><br/><code><h1>Absolute positioning</h1><p>   I am a basic block level element. My adjacent block level elements sit on new   lines below me. </p>  <p class='positioned'>   By default we span 100% of the width of our parent element, and we are as tall   as our child content. Our total width and height is our content + padding +   border width/height. </p>  <p>   We are separated by our margins. Because of margin collapsing, we are   separated by the width of one of our margins, not both. </p>  <p>   inline elements <span>like this one</span> and <span>this one</span> sit on   the same line as one another, and adjacent text nodes, if there is space on   the same line. Overflowing inline elements   <span>wrap onto a new line if possible — like this one containing text</span>,   or just go on to a new line if not, much like this image will do:   <img src='long.jpg' /> </p></code>",
			"codeCSS": "<h2>CSS</h2><br/><code>* {box-sizing: border-box;}body {width: 500px;margin: 0 auto;}p {background: aqua;border: 3px solid blue;padding: 10px;margin: 10px;}span {background: red;border: 1px solid black;}.positioned {position: absolute;background: yellow;top: 30px;left: 30px;}</code>",
			"result": {
				"imageUrl": ""
			}
		},
		{
			"title": "Fixed positioning",
			"text": "Fixed positioning is similar to absolute positioning, with the exception that the element's containing block is the initial containing block established by the viewport, unless any ancestor has transform, perspective, or filter property set to something other than none (see CSS Transforms Spec), which then causes that ancestor to take the place of the elements containing block. This can be used to create a 'floating' element that stays in the same position regardless of scrolling. In the example below, box 'One' is fixed at 80 pixels from the top of the page and 10 pixels from the left. Even after scrolling, it remains in the same place relative to the viewport. Also, when the will-change property is set to transform, a new containing block is established.",
			"codeHtml": "<h2>HTML</h2><br/><code><div class='outer'><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam congue tortoreget pulvinar lobortis. Vestibulum ante ipsum primis in faucibus orci luctuset ultrices posuere cubilia Curae; Nam ac dolor augue. Pellentesque mi mi,laoreet et dolor sit amet, ultrices varius risus. Nam vitae iaculis elit.Aliquam mollis interdum libero. Sed sodales placerat egestas. Vestibulum utarcu aliquam purus viverra dictum vel sit amet mi. Duis nisl mauris, aliquamsit amet luctus eget, dapibus in enim. Sed velit augue, pretium a semaliquam, congue porttitor tortor. Sed tempor nisl a lorem consequat, idmaximus erat aliquet. Sed sagittis porta libero sed condimentum. Aliquamfinibus lectus nec ante congue rutrum. Curabitur quam quam, accumsan idultrices ultrices, tempor et tellus.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam congue tortoreget pulvinar lobortis. Vestibulum ante ipsum primis in faucibus orci luctuset ultrices posuere cubilia Curae; Nam ac dolor augue. Pellentesque mi mi,laoreet et dolor sit amet, ultrices varius risus. Nam vitae iaculis elit.Aliquam mollis interdum libero. Sed sodales placerat egestas. Vestibulum utarcu aliquam purus viverra dictum vel sit amet mi. Duis nisl mauris, aliquamsit amet luctus eget, dapibus in enim. Sed velit augue, pretium a semaliquam, congue porttitor tortor. Sed tempor nisl a lorem consequat, idmaximus erat aliquet. Sed sagittis porta libero sed condimentum. Aliquamfinibus lectus nec ante congue rutrum. Curabitur quam quam, accumsan idultrices ultrices, tempor et tellus.</p><div class='box' id='one'>One</div></div></code>",
			"codeCSS": "<h2>CSS</h2><br/><code>* { box-sizing: border-box;}.box { width: 100px; height: 100px; background: red; color: white;}#one { position: fixed; top: 80px; left: 10px; background: blue;}.outer { width: 500px; height: 300px; overflow: scroll; padding-left: 150px;}</code>",
			"result": {
				"imageUrl": ""
			}
		},
		{
			"title": "Sticky positioning",
			"text": "Sticky positioning can be thought of as a hybrid of relative and fixed positioning when its nearest scrolling ancestor is the viewport. A stickily positioned element is treated as relatively positioned until it crosses a specified threshold, at which point it is treated as fixed until it reaches the boundary of its parent. For example: <code>#one { position: sticky; top: 10px; } <code>The above CSS rule would position the element with id one relatively until the viewport was scrolled such that the element would be less than 10 pixels from the top. Beyond that threshold, the element would be fixed to 10 pixels from the top.A common use for sticky positioning is for the headings in an alphabetized list. The 'B' heading will appear just below the items that begin with 'A' until they are scrolled offscreen. Rather than sliding offscreen with the rest of the content, the 'B' heading will then remain fixed to the top of the viewport until all the 'B' items have scrolled offscreen, at which point it will be covered up by the 'C' heading, and so on.You must specify a threshold with at least one of top, right, bottom, or left for sticky positioning to behave as expected. Otherwise, it will be indistinguishable from relative positioning.",
			"codeHtml": "<h2>HTML</h2><br/><code><dl> <div>   <dt>A</dt>   <dd>Andrew W.K.</dd>   <dd>Apparat</dd>   <dd>Arcade Fire</dd>   <dd>At The Drive-In</dd>   <dd>Aziz Ansari</dd> </div> <div>   <dt>C</dt>   <dd>Chromeo</dd>   <dd>Common</dd>   <dd>Converge</dd>   <dd>Crystal Castles</dd>   <dd>Cursive</dd> </div> <div>   <dt>E</dt>   <dd>Explosions In The Sky</dd> </div> <div>   <dt>T</dt>   <dd>Ted Leo &amp; The Pharmacists</dd>   <dd>T-Pain</dd>   <dd>Thrice</dd>   <dd>TV On The Radio</dd>   <dd>Two Gallants</dd> </div></dl></code>",
			"codeCSS": "<h2>CSS</h2><br/><code>* {   box-sizing: border-box; }  dl > div {   background: #fff;   padding: 24px 0 0 0; }  dt {   background: #b8c1c8;   border-bottom: 1px solid #989ea4;   border-top: 1px solid #717d85;   color: #fff;   font: bold 18px/21px Helvetica, Arial, sans-serif;   margin: 0;   padding: 2px 0 0 12px;   position: -webkit-sticky;   position: sticky;   top: -1px; }  dd {   font: bold 20px/45px Helvetica, Arial, sans-serif;   margin: 0;   padding: 0 0 0 12px;   white-space: nowrap; }  dd + dd {   border-top: 1px solid #ccc; } </code>",
			"result": {
				"imageUrl": ""
			}
		}
	]
}
